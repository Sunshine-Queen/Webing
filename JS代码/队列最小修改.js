// 题目描述
// 已知一个奇怪的队列，这个队列中有n个数，初始状态时，顺序是1,2,3,4,…n，是1-n按顺序排列。这个队列只支持一种操作，就是把队列中的第i号元素提前到队首(1<i<=n)，如有4个元素，初始为1，2，3，4,可以将3提前到队首，得到3，1，2，4 。 现在给出一个经过若干次操作之后的序列，请你找出这个序列至少是由原序列操作了多少次得到的。
// 输入描述
// 第一行是一个整数n(1<=n<=10^5)，表示序列中数字的数量。 接下来一行有n个数，是1-n的一个全排列。数字之间用空格隔开。
// 输出描述
// 输出仅包含一个数字，表示至少操作了几次。
// 示例一
// 输入
// 5
// 5 2 1 3 4
// 输出
// 2

// 这个题目的本质就是看有多少个数打破了原来的顺序，像例子中5和2打破了之前的顺序，之前的顺序从后往前依次减小。




var count = Number(readline());
var list = readline().split(' ');
var num = count - 1;
if (list.length == 1)
    print('0');
else {
    for (var i = count - 1; i > 0; i--) {
        if (Number(list[i]) > Number(list[i - 1]))
            num--;
        else
            break;
    }
    print(num);
}